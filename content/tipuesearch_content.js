var tipuesearch = {"pages": [{'title': '各組期末報告說明', 'text': '各組員必須在 W17 上課之前完成期末報告簡報影片上傳與連結, 並放入本網站之"專案口頭簡報"頁面. \n 各組必須在 W17 上課之前完成分組期末報告 pdf 檔案, 上傳至各分組的倉儲中, 並將連結提供至本網站之"專案報告書"頁面. \n 期末報告期間每週對各成員之評分依據下列要項: \n \n 各組員在各分組網站中所呈現之任務執行內容, 並拍攝操作影音 mp4, 將影片標題署名"國立虎尾科技大學-機械設計工程系-協同產品設計實習 A - 學號及影片主題" 後上傳, 並將影片嵌入本網站各章節頁面中. \n 每組將提供組長本網站倉儲協同管理權, 專門處理各組員在各分支或 master 分支中的 pull requests, 各組員必須透過以 ag1, ag2 .... 命名之分支對本倉儲改版, 確定內容無誤後, 再設法由組長處理各 pull requests 之內容合併, Github Pages 將設為與 master 分支對應, 各組員之評分將依據各 pull requests 中所列出之學號與內容判定. \n 請各組員勿將影片檔、圖片檔案或各式檔案送至本倉儲, 影片檔案請上傳至 Youtube, 圖片檔案請送至各組倉儲網站, 各式檔案則請送至各組員 Google Drive 區, 並以嵌入 (iframe), 將影片放入本網站, 其餘圖片或檔案則透過 img 或 a 標註放入各相關頁面. \n \n 2a 分組倉儲 \n https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1 \xa0( 2ag1 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2 \xa0( 2ag2 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1 \xa0( 2ag3 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4 \xa0( 2ag4 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5 \xa0( 2ag5 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6 \xa0( 2ag6 ) \n', 'tags': '', 'url': '各組期末報告說明.html'}, {'title': '執行規劃', 'text': '', 'tags': '', 'url': '執行規劃.html'}, {'title': '手足球系統模擬', 'text': '專案成果摘要 \n 專案執行動機 \n 相關文獻探討 \n 專案執行成員 \n 執行使用套件 \n 專案執行過程規劃 \n 專案執行內容 \n 專案結論 \n', 'tags': '', 'url': '手足球系統模擬.html'}, {'title': '設計與繪圖', 'text': '', 'tags': '', 'url': '設計與繪圖.html'}, {'title': '零組件尺寸分析', 'text': '手足球系統的零組件尺寸分析 (可行性分析) \n', 'tags': '', 'url': '零組件尺寸分析.html'}, {'title': '參數設計與繪圖', 'text': '手足球系統的零組件參數設計與繪圖 (零組件初步設計繪圖) \n Onshape 零組件連結 \n \n', 'tags': '', 'url': '參數設計與繪圖.html'}, {'title': '細部設計與 BOM', 'text': '手足球零件格式說明 \n 手足球零件格式說明 \n 零件 BOM \n 手足球零組件材料表 (含零組件下載連結) \n 零件尺寸圖 \n 零件尺寸圖 \n 零件部分組裝圖 \n 零件部分組裝圖 \n 3D 零組件爆炸圖 \n 3D 零組件爆炸圖 \n', 'tags': '', 'url': '細部設計與 BOM.html'}, {'title': 'V-rep 動態模擬', 'text': '0506模擬測試 \n 40623105 \n 影片 \n 40623109 \n 影片 \n 40623118 \n 影片1 \n 影片2', 'tags': '', 'url': 'V-rep 動態模擬.html'}, {'title': '送球機構設計與模擬', 'text': '\n \n', 'tags': '', 'url': '送球機構設計與模擬.html'}, {'title': '系統功能展示', 'text': '手足球模擬系統功能展示 (模擬展示與說明影片) \n \n', 'tags': '', 'url': '系統功能展示.html'}, {'title': '第十二周前', 'text': '利用影像辨識系統尋找紅方、藍方和綠球的位置。 \n \n 程式利用 https://github.com/nemilya/vrep-api-python-opencv 改編而成 \n vrep設定檔: https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1/blob/master/v-rep/40623128/TableFootBall/v-rep/tablefootball - 0507.ttt \n 程式檔: https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1/blob/master/v-rep/40623128/TableFootBall/v-rep/Image_Detection_RGB.py \n 程式碼: \n import vrep\nimport time\n\nfrom PIL import Image as I\nimport array\n\nimport cv2, numpy\n\n# function based on: \n#   https://github.com/simondlevy/OpenCV-Python-Hacks/blob/master/greenball_tracker.py\ndef track_green_object(image):\n    # Blur the image to reduce noise100\n    blur = cv2.GaussianBlur(image, (5,5),0)\n    # Convert BGR to HSV\n    hsv = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV)\n    # Threshold the HSV image for only green colors\n    range = 15\n    lower_green = numpy.array([60-range,100,100])\n    upper_green = numpy.array([60+range,255,255])\n    # Threshold the HSV image to get only green colors\n    mask = cv2.inRange(hsv, lower_green, upper_green)\n    # Blur the mask\n    bmask = cv2.GaussianBlur(mask, (5,5),0)\n    # Take the moments to get the centroid\n    moments = cv2.moments(bmask)\n    m00 = moments[\'m00\']\n    centroid_x, centroid_y = None, None\n    if m00 != 0:\n        centroid_x = int(moments[\'m10\']/m00)\n        centroid_y = int(moments[\'m01\']/m00)\n    # Assume no centroid\n    ctr = None\n    # Use centroid if it exists\n    if centroid_x != None and centroid_y != None:\n        ctr = (centroid_x, centroid_y)\n    return ctr\n\ndef track_blue_object(image):\n    # Blur the image to reduce noise100\n    blur = cv2.GaussianBlur(image, (5,5),0)\n    # Convert BGR to HSV\n    hsv = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV)\n    # Threshold the HSV image for only green colors\n    range = 15\n    lower_red = numpy.array([0-range,100,100])\n    upper_red = numpy.array([0+range,255,255])\n    # Threshold the HSV image to get only green colors\n    mask = cv2.inRange(hsv, lower_red, upper_red)\n    # Blur the mask\n    bmask = cv2.GaussianBlur(mask, (5,5),0)\n    # Take the moments to get the centroid\n    moments = cv2.moments(bmask)\n    m00 = moments[\'m00\']\n    centroid_x, centroid_y = None, None\n    if m00 != 0:\n        centroid_x = int(moments[\'m10\']/m00)\n        centroid_y = int(moments[\'m01\']/m00)\n    # Assume no centroid\n    ctr = None\n    # Use centroid if it exists\n    if centroid_x != None and centroid_y != None:\n        ctr = (centroid_x, centroid_y)\n    return ctr\n    \ndef track_red_object(image):\n    # Blur the image to reduce noise100\n    blur = cv2.GaussianBlur(image, (5,5),0)\n    # Convert BGR to HSV\n    hsv = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV)\n    # Threshold the HSV image for only green colors\n    range = 15\n    lower_blue = numpy.array([120-range,100,100])\n    upper_blue = numpy.array([120+range,255,255])\n    # Threshold the HSV image to get only green colors\n    mask = cv2.inRange(hsv, lower_blue, upper_blue)\n    # Blur the mask\n    bmask = cv2.GaussianBlur(mask, (5,5),0)\n    # Take the moments to get the centroid\n    moments = cv2.moments(bmask)\n    m00 = moments[\'m00\']\n    centroid_x, centroid_y = None, None\n    if m00 != 0:\n        centroid_x = int(moments[\'m10\']/m00)\n        centroid_y = int(moments[\'m01\']/m00)\n    # Assume no centroid\n    ctr = None\n    # Use centroid if it exists\n    if centroid_x != None and centroid_y != None:\n        ctr = (centroid_x, centroid_y)\n    return ctr\n\nvrep.simxFinish(-1)\nclientID = vrep.simxStart(\'127.0.0.1\', 19997, True, True, 5000, 5)\n\nif clientID!=-1:\n  print(\'Connected to remote API server\')\n  # get vision sensor objects\n  res, v0 = vrep.simxGetObjectHandle(clientID, \'vs1\', vrep.simx_opmode_oneshot_wait)\n  res, v1 = vrep.simxGetObjectHandle(clientID, \'vs2\', vrep.simx_opmode_oneshot_wait)\n  err, resolution, image = vrep.simxGetVisionSensorImage(clientID, v0, 0, vrep.simx_opmode_streaming)\n  time.sleep(1)\n  while (vrep.simxGetConnectionId(clientID) != -1):\n    # get image from vision sensor \'v0\'\n    err, resolution, image = vrep.simxGetVisionSensorImage(clientID, v0, 0, vrep.simx_opmode_buffer)\n    if err == vrep.simx_return_ok:\n        image_byte_array = array.array(\'b\', image)\n        #print(image_byte_array)\n        image_buffer = I.frombuffer("RGB", (resolution[0],resolution[1]), bytes(image_byte_array), "raw", "RGB", 0, 1)\n        img2 = numpy.asarray(image_buffer)\n      # try to find something green\n        ret_green = track_green_object(img2)\n        ret_red = track_red_object(img2)\n        ret_blue = track_blue_object(img2)\n      # overlay rectangle marker if something is found by OpenCV\n        if ret_green:\n            cv2.rectangle(img2,(ret_green[0]-5,ret_green[1]-5), (ret_green[0]+5,ret_green[1]+5), (0x99,0xff,0x33), 1)\n          # return image to sensor \'v1\'\n        if ret_red:\n            cv2.rectangle(img2,(ret_red[0]-3,ret_red[1]-5), (ret_red[0]+3,ret_red[1]+5), (0xff,0x33,0x33), 1)\n        if ret_blue:\n            cv2.rectangle(img2,(ret_blue[0]-3,ret_blue[1]-5), (ret_blue[0]+3,ret_blue[1]+5), (0x33,0xcc,0xff), 1)\n        img2 = img2.ravel()\n        #print(\'B=\',ret_blue[0],ret_blue[1])\n        #print(\'R=\',ret_red[0],ret_red[1])\n        #print(\'G=\',ret_green[0],ret_green[1])\n        vrep.simxSetVisionSensorImage(clientID, v1, img2, 0, vrep.simx_opmode_oneshot)\n    elif err == vrep.simx_return_novalue_flag:\n      print("no image yet")\n      pass\n    else:\n      print(err)\nelse:\n  print("Failed to connect to remote API Server")\n  vrep.simxFinish(clientID) \n', 'tags': '', 'url': '第十二周前.html'}, {'title': '結案報告', 'text': '', 'tags': '', 'url': '結案報告.html'}, {'title': '專案口頭簡報', 'text': '各組利用倉儲中的 Reveal.js 進行結案簡報 (結案口頭簡報) \n', 'tags': '', 'url': '專案口頭簡報.html'}, {'title': '專案報告書', 'text': '各組完成 html 與 pdf 格式之手足球專案結案報告 (文字結案報告書)', 'tags': '', 'url': '專案報告書.html'}]};