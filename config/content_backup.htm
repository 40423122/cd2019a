<h1>各組期末報告說明</h1>
<p>各組員必須在 W17 上課之前完成期末報告簡報影片上傳與連結, 並放入本網站之"專案口頭簡報"頁面.</p>
<p>各組必須在 W17 上課之前完成分組期末報告 pdf 檔案, 上傳至各分組的倉儲中, 並將連結提供至本網站之"專案報告書"頁面.</p>
<p>期末報告期間每週對各成員之評分依據下列要項:</p>
<ol>
<li>各組員在各分組網站中所呈現之任務執行內容, 並拍攝操作影音 mp4, 將影片標題署名"國立虎尾科技大學-機械設計工程系-協同產品設計實習 A - 學號及影片主題" 後上傳, 並將影片嵌入本網站各章節頁面中.</li>
<li>每組將提供組長本網站倉儲協同管理權, 專門處理各組員在各分支或 master 分支中的 pull requests, 各組員必須透過以 ag1, ag2 .... 命名之分支對本倉儲改版, 確定內容無誤後, 再設法由組長處理各 pull requests 之內容合併, Github Pages 將設為與 master 分支對應, 各組員之評分將依據各 pull requests 中所列出之學號與內容判定.</li>
<li>請各組員勿將影片檔、圖片檔案或各式檔案送至本倉儲, 影片檔案請上傳至 Youtube, 圖片檔案請送至各組倉儲網站, 各式檔案則請送至各組員 Google Drive 區, 並以嵌入 (iframe), 將影片放入本網站, 其餘圖片或檔案則透過 img 或 a 標註放入各相關頁面.</li>
</ol>
<h4>2a 分組倉儲</h4>
<p><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g1">2ag1</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/content">2ag2</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g3_1">2ag3</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g4">2ag4</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g5">2ag5</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g6">2ag6</a>)</p><h1>執行規劃</h1>
<h2>手足球系統模擬</h2>
<p>專案成果摘要</p>
<p>專案執行動機</p>
<p>相關文獻探討</p>
<p>專案執行成員</p>
<p>執行使用套件</p>
<p>專案執行過程規劃</p>
<p>專案執行內容</p>
<p>專案結論</p><h1>設計與繪圖</h1>
<p>組合圖:</p>
<p><a href="https://cad.onshape.com/documents/0894dee7161cb625fbf66c24/w/dd82ba727b43d8551157d048/e/4e12526592dd2e271bca4ad7">https://cad.onshape.com/documents/0894dee7161cb625fbf66c24/w/dd82ba727b43d8551157d048/e/4e12526592dd2e271bca4ad7</a></p><h2>零組件尺寸分析</h2>
<p>手足球系統的零組件尺寸分析 (可行性分析)</p>
<h2>參數設計與繪圖</h2>
<p>手足球系統的零組件參數設計與繪圖 (零組件初步設計繪圖)</p>
<p><a href="https://cad.onshape.com/documents/0894dee7161cb625fbf66c24/w/dd82ba727b43d8551157d048/e/4e12526592dd2e271bca4ad7">Onshape 零組件連結</a></p>
<p>【機構設計】</p>
<p>〈初始設計〉</p>
<p>初始設計挑出了選多方案，如:</p>
<p>1.桿件推送</p>
<p>2.螺旋尺上推</p>
<p>3.打擊軌道</p>
<p><img caption="false" height="529" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E5%88%9D%E6%AD%A5%E8%A8%AD%E8%A8%88(%E4%B8%80)_%E6%94%B9.png" width="800"/></p>
<p>最後挑選打擊裝置搭配配斜面軌道的方式將球送出。</p>
<p>因只需一次做動就可完成目標。</p>
<p></p>
<p>〈軌道設計〉</p>
<p><img caption="false" height="576" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E5%88%9D%E6%AD%A5%E8%A8%AD%E8%A8%88(%E4%BA%8C)_%E6%94%B9.png" width="800"/></p>
<p>最初設計是想將兩條軌道集合一束，用一次打擊就可，</p>
<p>但後來發現會有收束誤差與繪製上的困難，後來還是改</p>
<p>為左右各開一條軌道，後來還是改為左右各開一條軌道</p>
<p>並各自擁有一打擊裝置。</p>
<p>最後採用複斜面旋轉軌道，將球送至最高點後，再使用斜面將球滾落。</p>
<p><img caption="false" height="588" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E5%88%9D%E6%AD%A5%E8%A8%AD%E8%A8%88(%E4%B8%89)_%E6%94%B9.png" width="800"/></p>
<p>〈打擊機構設計〉</p>
<p><img caption="false" height="559" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E5%88%9D%E6%AD%A5%E8%A8%AD%E8%A8%88(%E5%9B%9B)_%E6%94%B9.png" width="800"/></p>
<p>打擊機構非常直覺，就是使用一個帶緣圓棒將球打擊出去，</p>
<p>並外掛置打擊區旁，作為球之動力。</p>
<p></p>
<p><span>〈</span><span>集球門</span><span>〉</span></p>
<p>原先的設計，發現組裝後門框的高度沒有高於球門，怕會出現卡球的可能所以要重新畫</p>
<p><img caption="false" height="511" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%9612.PNG" width="600"/></p>
<p><img caption="false" height="618" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%9613.PNG" width="600"/></p>
<p></p>
<p>第二版 </p>
<p><img caption="false" height="419" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%96%205.PNG" width="600"/></p>
<p>在畫的時候發現球檯沒有高度，而假如球快速的撞擊檔板可能會造成球直接反彈並有可能回到場地內，就把球檯加高3英吋，在檔板的部分畫成密閉式以防球會跑出去</p>
<p><img caption="false" height="320" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/Inked%E6%93%B7%E5%8F%9614_LI.jpg" width="600"/></p>
<p>而在這裡加裝這支橫桿是因為在舊版的球門框有高低的落差，如果不加這支橫桿球在進入擊球門前會被凹槽卡住，因為這個原因所以在新版就把高低落差的問題給解決所以在新版就沒有這支橫桿。</p>
<p><img caption="false" height="424" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%966.PNG" width="600"/></p>
<p><img caption="false" height="640" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/10.PNG" width="500"/></p>
<p>一開始畫通道的時候，想說話圓弧型的比較好滾動，但在簡化方面就比較困難，所以在第三版畫的時候就把它改成方形的。</p>
<p><img alt="" height="426" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/41.PNG" width="438"/></p>
<p><img alt="" height="477" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%9624.PNG" width="478"/></p>
<p></p>
<p><span>〈</span>軌道<span>〉初版</span></p>
<p>因為當時還不確定球的大小，就先設計較大的尺寸，以利後續挑整</p>
<p><img caption="false" height="546" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%962.PNG" width="600"/></p>
<p> 用螺旋線做去軌道的路線</p>
<p><img alt="" height="525" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%9610.PNG" width="410"/></p>
<p>用掃掠將軌道做出</p>
<p><img caption="false" height="419" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%963.PNG" width="600"/></p>
<p>最後的下銳</p>
<p><img caption="false" height="326" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%93%B7%E5%8F%964.PNG" width="600"/></p>
<p>不過因為螺旋半徑不夠大、下銳角太大、整體上升不足......等問題做了第二代</p>
<p></p><h2>細部設計與 BOM</h2>
<p>各零件圖 BOM</p>
<p>球場</p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/0a7d5993d816c963a8bccb2a">工程圖連結</a></p>
<p><img alt="" height="695" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E7%90%83%E5%A0%B4666.PNG" width="1004"/></p>
<p><span>球員</span></p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/559ac25c8f81c8df2ce4933b">工程圖連結</a></p>
<p><img alt="" height="488" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E7%90%83%E5%93%A1666.PNG" width="712"/></p>
<p>軌道</p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/612b7e584b3bf0a7c534ff78">工程圖連結</a></p>
<p><img alt="" height="613" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E8%BB%8C%E9%81%9366366.PNG" width="887"/></p>
<p>導球球門</p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/adef57cb37b21ea86420533e">工程圖連結</a></p>
<p><img alt="" height="702" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E5%B0%8E%E7%90%83%E7%90%83%E9%96%80666.PNG" width="1005"/></p>
<p>擊球系統</p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/6356fabe32e4b2fa2a54673d">工程圖連結</a></p>
<p><img alt="" height="626" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E6%9C%AA%E5%91%BD%E5%90%8Dz.png" width="910"/></p>
<p>場地組合</p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/06d764e2ef81e6504690bed6">工程圖連結</a></p>
<p><img alt="" height="581" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/%E5%A0%B4%E5%9C%B0%E7%B5%84%E5%90%886366.PNG" width="847"/></p>
<p>組合圖 BOM</p>
<p><a href="https://cad.onshape.com/documents/dbd4a067bc53477ac52fc4ca/w/4fe0861d10e13bc022e5d76e/e/bfdcbb79ace3bc2724456c21">工程圖連結</a></p>
<p><img alt="" height="625" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/bom12.PNG" width="907"/></p>
<h4></h4><h1>V-rep 動態模擬</h1>
<p></p><h2>送球機構設計與模擬</h2>
<p></p>
<p></p><h2>系統功能展示</h2>
<<<<<<< HEAD
<p><a href="https://mdecadp2018.github.io/site-40623130/content/Vrep%E6%89%8B%E8%B6%B3%E7%90%83-All_Version.html">這裡紀載了全部的手足球版本以及詳細歷程</a></p>
<p>由於部分程式過長所以<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/content/%E7%B3%BB%E7%B5%B1%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA.html">點此處</a>可以到原網站</p>
<h4>人機對決</h4>
<p>最終版本的'玩家與電腦'對打，完整code</p>
<p>操作說明:方向鍵的左右下按鍵 、z、x、c、v分別按順序從z的守門員到v的最前排、R鍵用來讓球回位至正中央(怕卡bug)<img alt="" height="564" src="/images/FTB(final).gif" width="1000"/></p>
<p><span>人機對決</span><span>程式過長</span></p>
<p><img alt="" height="480" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(final).gif" width="850"/></p>
<h4><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/v7auUIJMlGg" width="560"></iframe></h4>
<p>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion.ttt</a></p>
<h4>機²<span>對決</span></h4>
<p><span>寫完人機對打後，花了不到1小時寫完電腦對電腦的版本</span><img alt="" height="564" src="/images/FTB(final_EX).gif" width="1000"/>-<span>機²</span><span>對決程式過長</span></p>
<p><img alt="" height="469" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(final_EX).gif" width="850"/></p>
<p>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion_EX.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion_EX.ttt</a></p>
<h4><span>人形歸位</span></h4>
<p>我將每根桿件設定成"當按了按鍵變成擊球狀態後會到達邊界數值，如果到達邊界直做減速度運動回到初始狀態"，下方code中為+dVel，其原因是因為原先設定擊球為做減速度運動而回球則加入加速度。<img alt="" height="564" src="/images/FTB(3).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(3).gif" width="850"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">A= sim.getObjectHandle('RS1_PO1')
PA= sim.getObjectPosition(A,-1)
if PA[1] &gt;= -0.712 then
    Roller_v = Roller_v + dVel*3
end
B= sim.getObjectHandle('RS2_PO1')
PB= sim.getObjectPosition(B,-1)
if PB[1] &gt;= -0.531 then
    Roller_v2 = Roller_v2 + dVel*3
end
C= sim.getObjectHandle('RS4_PO2')
PC= sim.getObjectPosition(C,-1)
if PC[1] &gt;= -0.197 then
    Roller_v3=Roller_v3 + dVel*5
end
D= sim.getObjectHandle('RS3_PO1')
PD= sim.getObjectPosition(D,-1)
if PD[1] &gt;= 0.137 then
    Roller_v4=Roller_v4 + dVel*5
end</pre>
<p><span>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/www2.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/www2.ttt</a></span></p>
<h4>電腦多人形球位判斷式</h4>
<p>將擊球的人行分成三個後，紀錄每兩個人型之間的距離，利用補正讓球穿過人形與人形之間的分界線時，判斷式work，加入補正的數值讓最左或是最右邊的人形能對正球體。<span>此程式為最初簡易版本。</span><img alt="" height="564" src="/images/FTB(6).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(6).gif" width="850"/></p>
<p><span>以下都更改於function sysCall_actuation()中</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-------------------------------------
               if (auxiliaryData[1]==2008) then
                Roller_v = Roller_v + dVel*20
                Roller_v2 = Roller_v2 + dVel*20
                Roller_v3 = Roller_v3 + dVel*20
                Roller_v4 = Roller_v4 + dVel*20
               if (Roller_v &lt; 0) then
                  Roller_v = 0
               end
               if (Roller_v2 &lt; 0) then
                  Roller_v2 = 0
               end
               if (Roller_v3 &lt; 0) then
                  Roller_v3 = 0
               end
               if (Roller_v4 &lt; 0) then
                  Roller_v4 = 0
               end
            end
-----------------------------------------------
    --computer--
    Body_s = sim.getObjectPosition(Body,-1)
    Ball_s = sim.getObjectPosition(Ball,-1)
    X = Body_s[1] - Ball_s[1]
    Y = Body_s[2] - Ball_s[2]
    if 1 then
        if X &lt;= 0.02 and Y &lt;= 0 then
            sim.setJointTargetVelocity(LR1,-5)
        elseif X &gt; 0.02 and Y &lt;= 0 then
            sim.setJointTargetVelocity(LR1,2)
        elseif X &lt;= 0.02 and Y &gt; 0 then            
            sim.setJointTargetVelocity(LR1,-5)        
        elseif X &gt; 0.02 and Y &gt; 0 then                
            sim.setJointTargetVelocity(LR1,2)
        end
        YYYYY = Y*7
        sim.setJointTargetVelocity(L1,YYYYY)
    end
 
    Body_s2 = sim.getObjectPosition(Body2,-1)
    X2_1 = Body_s2[1] - Ball_s[1]
    Y2_1 = Body_s2[2] - Ball_s[2] - 0.15
    Y2_2 = Body_s2[2] - Ball_s[2] + 0.15
    if X2_1 &gt;= 0.02 then
        if Ball_s[2] &lt;= -0.133 then
            C_K_B_X2()
        Y2_1 = Y2_1*5
        sim.setJointTargetVelocity(L2,Y2_1)
        elseif Ball_s[2] &gt; -0.133 then
            C_K_B_X2()
        Y2_2 = Y2_2*5
        sim.setJointTargetVelocity(L2,Y2_2)
        end
    end
 
    Body_s4 = sim.getObjectPosition(Body4,-1)
    X4_1 = Body_s4[1] - Ball_s[1]
    Y4_1 = Body_s4[2] - Ball_s[2] - 0.15
    Y4_2 = Body_s4[2] - Ball_s[2] + 0.15
    if X4_1 &gt;= 0.02 then
        if Ball_s[2] &lt;= -0.133 then
            C_K_B_X4()
        Y4_1 = Y4_1*3
        sim.setJointTargetVelocity(L4,Y4_1)
        elseif Ball_s[2] &gt; -0.133 then
            C_K_B_X4()
        Y4_2 = Y4_2*3
        sim.setJointTargetVelocity(L4,Y4_2)
        end
    end
--[[
    test_s = sim.getObjectPosition(test,-1)
    M =  test_s[2]- Ball_s[2]
    print(M)
--]]
    Body_s3 = sim.getObjectPosition(Body3,-1)
    X3_1 = Body_s3[1] - Ball_s[1]
    Y3_1 = Body_s3[2] - Ball_s[2]
    Y3_2 = Body_s3[2] - Ball_s[2] +0.2487
    Y3_3 = Body_s3[2] - Ball_s[2] -0.2487
    if X3_1 &gt;= 0.02 then
        if Ball_s[2] &lt; -0.0028 and Ball_s[2] &gt;= -0.2487 then
            C_K_B_X3()
        Y3_1 = Y3_1*1.5
        sim.setJointTargetVelocity(L3,Y3_1)
        elseif Ball_s[2] &gt;= -0.0028 then
            C_K_B_X3()
        Y3_2 = Y3_2*1.5
        sim.setJointTargetVelocity(L3,Y3_2)
        elseif Ball_s[2] &lt; -0.2487 then
            C_K_B_X3()
        Y3_3 = Y3_3*1.5
        sim.setJointTargetVelocity(L3,Y3_3)
        end
    end
end
function C_K_B_X2()
    if X2_1 &lt; 0.03 then
    sim.setJointTargetVelocity(LR2,-5)
    elseif X2_1 &gt; 0.03 then
    sim.setJointTargetVelocity(LR2,5)
    end
end
function C_K_B_X3()
    if X3_1 &lt; 0.03 then
    sim.setJointTargetVelocity(LR3,-5)
    elseif X3_1 &gt; 0.03 then
    sim.setJointTargetVelocity(LR3,5)
    end
end
function C_K_B_X4()
    if X4_1 &lt; 0.03 then
    sim.setJointTargetVelocity(LR4,-5)
    elseif X4_1 &gt; 0.03 then
    sim.setJointTargetVelocity(LR4,5)
    end
end</pre>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/nGLzb6gO8NI" width="560"></iframe></p>
<p>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/ww5.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/ww5.ttt</a></p>
<h4><span>回球判斷式-無軌道(包含計分判斷式)</span></h4>
<p>一開始還沒有導球軌道時，為了不用一直關掉在啟動，寫了一個簡單的回位code，讓球經過球門時，由於球門有判斷式屬於邊界，一通過就會回到設定好的球。</p>
<p>而計分也是利用相通的方法，且由於此程式會自動形成迴圈所以讓他判斷成每當球經過時+1分後回傳。此程式為最初簡易版本。<img alt="" height="564" src="/images/FTB(7).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(7).gif" width="850"/></p>
<p><span>以下都更改於function sysCall_actuation()中</span></p>
<div class="line number1 index0 alt2"><code class="lua spaces"><code class="lua spaces"><code class="lua spaces"> </code></code></code>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">       if 1 then  --C_goalkeeper
            if X &lt;= 0.02 then
                sim.setJointTargetVelocity(LR1,-5)
            elseif X &gt; 0.02 then
                sim.setJointTargetVelocity(LR1,5)
            end
       end
----------------
       if Ball_s[1] &lt; -0.85 or Ball_s[1] &gt;= 0.61 then
            sim.setObjectPosition(Ball,-1,{-0.1429, -0.1334, 0.5})
       end
</pre>
<code class="lua spaces"><code class="lua spaces"><br/></code></code><code class="lua spaces"><br/></code></div>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/nGLzb6gO8NI" width="560"></iframe></p>
<p><span></span>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/Reborn.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/Reborn.ttt</a></p>
<h4><span>偽-回球判斷式-有軌道</span></h4>
<p><span>也就是送球機構於上一章節的送球機構設計與模擬討論過</span><img alt="" height="564" src="/images/FTB(14).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(14).gif" width="850"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function reborn_ball_count_goal()
    if Ball_s[1] &lt; -0.85 and Ball_s[3] &gt; 0.12507 then
        Player_G = Player_G + 1
--        sim.setObjectPosition(Ball,-1,{-0.13, -0.1334, 0.5})
    end   
    if Ball_s[1] &gt;= 0.61 and Ball_s[3] &gt; 0.1251 then
        Computer_G = Computer_G + 1
--        sim.setObjectPosition(Ball,-1,{-0.15, -0.1334, 0.5})
    end
    if Ball_s[3] &gt; 0.1251 then
        if Ball_s[1] &lt; -0.85 or Ball_s[1] &gt;= 0.61 then
            print[[Player : Computer]]
            print('      '..Computer_G..'     '..Player_G)
        end
    end
    if Ball_s[1] &gt; 0.905 and Ball_s[2] &lt; -0.069 and Ball_s[3] &lt; 0.036 then
        sim.setJointTargetVelocity(Push_1,1)
    end
    if Ball_s[1] &lt; -1.15 and Ball_s[2] &lt; -0.123 and Ball_s[3] &lt; 0.036 then
        sim.setJointTargetVelocity(Push_2,-1)
    end
    if Ball_s[3] &gt; 0.036 then
        sim.setJointTargetVelocity(Push_1,-1)
        sim.setJointTargetVelocity(Push_2,1)
    end
    if Ball_s[1] &lt; -1.156 and Ball_s[2] &gt; 0.163 and Ball_s[3] &gt; 0.058 then
    sim.setObjectPosition(Ball,-1,{-0.20361, 0.2739, 0.15735})
    end
    if Ball_s[1] &lt; -0.20361 and Ball_s[2] &gt; 0.2740 and Ball_s[3] &gt; 0.15735 then
    sim.setObjectPosition(Ball,-1,{-0.2049, 0.23, 0.1482})
    end
    if Ball_s[1] &gt; 0.9056 and Ball_s[2] &lt;  -0.4247 and Ball_s[3] &gt; 0.0592 then
    sim.setObjectPosition(Ball,-1,{-0.043425,  -0.60401, 0.15735})
    end
    if Ball_s[1] &gt; -0.04753 and Ball_s[2] &lt;  -0.5240 and Ball_s[3] &gt; 0.15735 then
    sim.setObjectPosition(Ball,-1,{-0.03667,  -0.48443, 0.1482})
    end
end</pre>
<p><span><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/HpKoChBwPaw" width="560"></iframe></span></p>
<p><span></span>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/C_Goal_4.3.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/C_Goal_4.3.ttt</a></p>
<h4>問題與討論</h4>
<p>Q1.怎麼沒有雙打?</p>
<p>A1.按鍵過多不好操控，最後會變成賽外賽?</p>
<p>Q2.彈性係數怎麼調整?</p>
<p>A2.<span>彈性系數於球的材質中調整，而材質的調整在關係設定的下方，表中的Restitution就是了最大彈性為1最小為0，越大越彈。</span></p>
<p><img caption="false" height="171" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(1).png" width="666"/></p>
<p>T3:<span>反作用設定:包含場地、球、桿件、人形 ((解釋起來很麻煩但大概是這樣</span></p>
<p><span>第一個為場地 : 第一行設定讓除了球、人形的桿件能反應但設定第八行讓球、人形可反應但桿件無法，其餘不勾選</span></p>
<p><img alt="" height="125" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(5).png" width="666"/></p>
<p><span>第二個為球 : 第一行不勾選讓桿件與人行無法反應，但勾選其他行(第八)讓人形能反應</span></p>
<p><span><img alt="" height="160" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(6).png" width="600"/></span></p>
<p>第三個為桿件 : 只與場地反應((這裡注意，桿件本身與人型成父子屬性</p>
<p><img alt="" height="264" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(7).png" width="600"/></p>
<p>最後是人形 : 勾選第八行讓球反應可踢球且因與場地反應所以不出場地</p>
<p><img alt="" height="344" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(8).png" width="600"/></p>
<p>理解這個需要一點邏輯...如果不懂就照勾選吧...</p>
<p>T4.<span>運行時建議 先點一下烏龜 太快會增加電腦能力也有機率bug</span></p>
<p><img alt="" height="53" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(13).png" width="100"/></p>
<p>Q5.怎麼不用python寫??</p>
<p>A5.我會選擇使用Vrep內嵌的Lua編寫的原因</p>
<p>優點:</p>
<p>python : 可執行運算值較大的編譯、可加外部其他的程式合用</p>
<p>lua : Vrep內部沿用 , 延遲現象較少、編譯很方便</p>
<p><span>缺點:</span></p>
<p>python : 會有爆ping問題導致延遲、產生很多衝突可能性高</p>
<p>lua : 太多運算時直接停止、內部函式限制多</p>
<p>目前體會到的優缺點大概就這樣，而且感覺我們班大部分的人都是用<span>python 寫，所以我想用少數人用的lua。</span></p><h1>結案報告</h1>
=======
<p>手足球模擬系統功能展示 (模擬展示與說明影片)</p>
<p>5/6 : 測試 lua sleep()取ping值跑time去延時執行的程式 , 並使兩桿件分開作動===問題:vrep執行sleep()中取ping值時計算過大並中止</p><h1>結案報告</h1>
>>>>>>> 475f030d87e05d010c9d746bb682b22cc13f2fd4
<h2>專案口頭簡報</h2>
<p>各組利用倉儲中的 Reveal.js 進行結案簡報 (結案口頭簡報)</p>
<h2>專案報告書</h2>
<p>各組完成 html 與 pdf 格式之手足球專案結案報告 (文字結案報告書)</p>
<p><a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/downloads/report.pdf">PDF</a></p>