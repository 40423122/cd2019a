<h1>各組期末報告說明</h1>
<p>各組員必須在 W17 上課之前完成期末報告簡報影片上傳與連結, 並放入本網站之"專案口頭簡報"頁面.</p>
<p>各組必須在 W17 上課之前完成分組期末報告 pdf 檔案, 上傳至各分組的倉儲中, 並將連結提供至本網站之"專案報告書"頁面.</p>
<p>期末報告期間每週對各成員之評分依據下列要項:</p>
<ol>
<li>各組員在各分組網站中所呈現之任務執行內容, 並拍攝操作影音 mp4, 將影片標題署名"國立虎尾科技大學-機械設計工程系-協同產品設計實習 A - 學號及影片主題" 後上傳, 並將影片嵌入本網站各章節頁面中.</li>
<li>每組將提供組長本網站倉儲協同管理權, 專門處理各組員在各分支或 master 分支中的 pull requests, 各組員必須透過以 ag1, ag2 .... 命名之分支對本倉儲改版, 確定內容無誤後, 再設法由組長處理各 pull requests 之內容合併, Github Pages 將設為與 master 分支對應, 各組員之評分將依據各 pull requests 中所列出之學號與內容判定.</li>
<li>請各組員勿將影片檔、圖片檔案或各式檔案送至本倉儲, 影片檔案請上傳至 Youtube, 圖片檔案請送至各組倉儲網站, 各式檔案則請送至各組員 Google Drive 區, 並以嵌入 (iframe), 將影片放入本網站, 其餘圖片或檔案則透過 img 或 a 標註放入各相關頁面.</li>
</ol>
<h4>2a 分組倉儲</h4>
<p><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g1">2ag1</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/content">2ag2</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g3_1">2ag3</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g4">2ag4</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g5">2ag5</a>)<br/><br/><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6">https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6</a> (<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g6">2ag6</a>)</p><h1>執行規劃</h1>
<h2>手足球系統模擬</h2>
<p>專案成果摘要</p>
<p>專案執行動機</p>
<p>相關文獻探討</p>
<p>專案執行成員</p>
<p>執行使用套件</p>
<p>專案執行過程規劃</p>
<p>專案執行內容</p>
<p>專案結論</p><h1>設計與繪圖</h1>
<h2>零組件尺寸分析</h2>
<p>手足球系統的零組件尺寸分析 (可行性分析)</p>
<h2>參數設計與繪圖</h2>
<p>手足球系統的零組件參數設計與繪圖 (零組件初步設計繪圖)</p>
<p>Onshape 零組件連結</p>
<h2>細部設計與 BOM</h2>
<h4>手足球零件格式說明</h4>
<p>手足球零件格式說明</p>
<h4>零件 BOM</h4>
<p>手足球零組件材料表 (含零組件下載連結)</p>
<h4>零件尺寸圖</h4>
<p>零件尺寸圖</p>
<h4>零件部分組裝圖</h4>
<p>零件部分組裝圖</p>
<h4>3D 零組件爆炸圖</h4>
<p>3D 零組件爆炸圖</p><h1>V-rep 動態模擬</h1>
<p></p><h2>送球機構設計與模擬</h2>
<p></p>
<p></p><h2>系統功能展示</h2>
<p><a href="https://mdecadp2018.github.io/site-40623130/content/Vrep%E6%89%8B%E8%B6%B3%E7%90%83-All_Version.html">這裡紀載了全部的手足球版本以及詳細歷程</a></p>
<p>由於部分程式過長所以<a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/content/%E7%B3%BB%E7%B5%B1%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA.html">點此處</a>可以到原網站</p>
<h4>人機對決</h4>
<p>最終版本的'玩家與電腦'對打，完整code</p>
<p>操作說明:方向鍵的左右下按鍵 、z、x、c、v分別按順序從z的守門員到v的最前排、R鍵用來讓球回位至正中央(怕卡bug)<img alt="" height="564" src="/images/FTB(final).gif" width="1000"/>((<span>人機對決</span><span>程式過長</span></p>
<p><img alt="" height="480" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(final).gif" width="850"/></p>
<h4><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/v7auUIJMlGg" width="560"></iframe></h4>
<p>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion.ttt</a></p>
<h4>機²<span>對決</span></h4>
<p><span>寫完人機對打後，花了不到1小時寫完電腦對電腦的版本</span><img alt="" height="564" src="/images/FTB(final_EX).gif" width="1000"/>-((<span>機²</span><span>對決程式過長</span></p>
<p><img alt="" height="469" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(final_EX).gif" width="850"/></p>
<p>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion_EX.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion_EX.ttt</a></p>
<h4><span>人形歸位</span></h4>
<p>我將每根桿件設定成"當按了按鍵變成擊球狀態後會到達邊界數值，如果到達邊界直做減速度運動回到初始狀態"，下方code中為+dVel，其原因是因為原先設定擊球為做減速度運動而回球則加入加速度。<img alt="" height="564" src="/images/FTB(3).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(3).gif" width="850"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">A= sim.getObjectHandle('RS1_PO1')
PA= sim.getObjectPosition(A,-1)
if PA[1] &gt;= -0.712 then
    Roller_v = Roller_v + dVel*3
end
B= sim.getObjectHandle('RS2_PO1')
PB= sim.getObjectPosition(B,-1)
if PB[1] &gt;= -0.531 then
    Roller_v2 = Roller_v2 + dVel*3
end
C= sim.getObjectHandle('RS4_PO2')
PC= sim.getObjectPosition(C,-1)
if PC[1] &gt;= -0.197 then
    Roller_v3=Roller_v3 + dVel*5
end
D= sim.getObjectHandle('RS3_PO1')
PD= sim.getObjectPosition(D,-1)
if PD[1] &gt;= 0.137 then
    Roller_v4=Roller_v4 + dVel*5
end</pre>
<p><span>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/www2.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/www2.ttt</a></span></p>
<h4>電腦多人形球位判斷式</h4>
<p>將擊球的人行分成三個後，紀錄每兩個人型之間的距離，利用補正讓球穿過人形與人形之間的分界線時，判斷式work，加入補正的數值讓最左或是最右邊的人形能對正球體。<span>此程式為最初簡易版本。</span><img alt="" height="564" src="/images/FTB(6).gif" width="1000"/>(判斷式過長</p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(6).gif" width="850"/></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/nGLzb6gO8NI" width="560"></iframe></p>
<p>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/ww5.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/ww5.ttt</a></p>
<h4><span>回球判斷式-無軌道(包含計分判斷式)</span></h4>
<p>一開始還沒有導球軌道時，為了不用一直關掉在啟動，寫了一個簡單的回位code，讓球經過球門時，由於球門有判斷式屬於邊界，一通過就會回到設定好的球。</p>
<p>而計分也是利用相通的方法，且由於此程式會自動形成迴圈所以讓他判斷成每當球經過時+1分後回傳。此程式為最初簡易版本。<img alt="" height="564" src="/images/FTB(7).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(7).gif" width="850"/></p>
<p><span>以下都更改於function sysCall_actuation()中</span></p>
<div class="line number1 index0 alt2"><code class="lua spaces"><code class="lua spaces"><code class="lua spaces"> </code></code></code>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">       if 1 then  --C_goalkeeper
            if X &lt;= 0.02 then
                sim.setJointTargetVelocity(LR1,-5)
            elseif X &gt; 0.02 then
                sim.setJointTargetVelocity(LR1,5)
            end
       end
----------------
       if Ball_s[1] &lt; -0.85 or Ball_s[1] &gt;= 0.61 then
            sim.setObjectPosition(Ball,-1,{-0.1429, -0.1334, 0.5})
       end
</pre>
<code class="lua spaces"><code class="lua spaces"><br/></code></code><code class="lua spaces"><br/></code></div>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/nGLzb6gO8NI" width="560"></iframe></p>
<p><span></span>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/Reborn.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/Reborn.ttt</a></p>
<h4><span>偽-回球判斷式-有軌道</span></h4>
<p><span>也就是送球機構於上一章節的送球機構設計與模擬討論過</span><img alt="" height="564" src="/images/FTB(14).gif" width="1000"/></p>
<p><img alt="" height="442" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB(14).gif" width="850"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function reborn_ball_count_goal()
    if Ball_s[1] &lt; -0.85 and Ball_s[3] &gt; 0.12507 then
        Player_G = Player_G + 1
--        sim.setObjectPosition(Ball,-1,{-0.13, -0.1334, 0.5})
    end   
    if Ball_s[1] &gt;= 0.61 and Ball_s[3] &gt; 0.1251 then
        Computer_G = Computer_G + 1
--        sim.setObjectPosition(Ball,-1,{-0.15, -0.1334, 0.5})
    end
    if Ball_s[3] &gt; 0.1251 then
        if Ball_s[1] &lt; -0.85 or Ball_s[1] &gt;= 0.61 then
            print[[Player : Computer]]
            print('      '..Computer_G..'     '..Player_G)
        end
    end
    if Ball_s[1] &gt; 0.905 and Ball_s[2] &lt; -0.069 and Ball_s[3] &lt; 0.036 then
        sim.setJointTargetVelocity(Push_1,1)
    end
    if Ball_s[1] &lt; -1.15 and Ball_s[2] &lt; -0.123 and Ball_s[3] &lt; 0.036 then
        sim.setJointTargetVelocity(Push_2,-1)
    end
    if Ball_s[3] &gt; 0.036 then
        sim.setJointTargetVelocity(Push_1,-1)
        sim.setJointTargetVelocity(Push_2,1)
    end
    if Ball_s[1] &lt; -1.156 and Ball_s[2] &gt; 0.163 and Ball_s[3] &gt; 0.058 then
    sim.setObjectPosition(Ball,-1,{-0.20361, 0.2739, 0.15735})
    end
    if Ball_s[1] &lt; -0.20361 and Ball_s[2] &gt; 0.2740 and Ball_s[3] &gt; 0.15735 then
    sim.setObjectPosition(Ball,-1,{-0.2049, 0.23, 0.1482})
    end
    if Ball_s[1] &gt; 0.9056 and Ball_s[2] &lt;  -0.4247 and Ball_s[3] &gt; 0.0592 then
    sim.setObjectPosition(Ball,-1,{-0.043425,  -0.60401, 0.15735})
    end
    if Ball_s[1] &gt; -0.04753 and Ball_s[2] &lt;  -0.5240 and Ball_s[3] &gt; 0.15735 then
    sim.setObjectPosition(Ball,-1,{-0.03667,  -0.48443, 0.1482})
    end
end</pre>
<p><span><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/HpKoChBwPaw" width="560"></iframe></span></p>
<p><span></span>檔案:<a href="https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/C_Goal_4.3.ttt">https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/C_Goal_4.3.ttt</a></p>
<h4>問題與討論</h4>
<p>Q1.怎麼沒有雙打?</p>
<p>A1.按鍵過多不好操控，最後會變成賽外賽?</p>
<p>Q2.彈性係數怎麼調整?</p>
<p>A2.<span>彈性系數於球的材質中調整，而材質的調整在關係設定的下方，表中的Restitution就是了最大彈性為1最小為0，越大越彈。</span></p>
<p><img caption="false" height="171" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(1).png" width="666"/></p>
<p>T3:<span>反作用設定:包含場地、球、桿件、人形 ((解釋起來很麻煩但大概是這樣</span></p>
<p><span>第一個為場地 : 第一行設定讓除了球、人形的桿件能反應但設定第八行讓球、人形可反應但桿件無法，其餘不勾選</span></p>
<p><img alt="" height="125" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(5).png" width="666"/></p>
<p><span>第二個為球 : 第一行不勾選讓桿件與人行無法反應，但勾選其他行(第八)讓人形能反應</span></p>
<p><span><img alt="" height="160" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(6).png" width="600"/></span></p>
<p>第三個為桿件 : 只與場地反應((這裡注意，桿件本身與人型成父子屬性</p>
<p><img alt="" height="264" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(7).png" width="600"/></p>
<p>最後是人形 : 勾選第八行讓球反應可踢球且因與場地反應所以不出場地</p>
<p><img alt="" height="344" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(8).png" width="600"/></p>
<p>理解這個需要一點邏輯...如果不懂就照勾選吧...</p>
<p>T4.<span>運行時建議 先點一下烏龜 太快會增加電腦能力也有機率bug</span></p>
<p><img alt="" height="53" src="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/images/FTB_attention%20(13).png" width="100"/></p>
<p>Q5.怎麼不用python寫??</p>
<p>A5.我會選擇使用Vrep內嵌的Lua編寫的原因</p>
<p>優點:</p>
<p>python : 可執行運算值較大的編譯、可加外部其他的程式合用</p>
<p>lua : Vrep內部沿用 , 延遲現象較少、編譯很方便</p>
<p><span>缺點:</span></p>
<p>python : 會有爆ping問題導致延遲、產生很多衝突可能性高</p>
<p>lua : 太多運算時直接停止、內部函式限制多</p>
<p>目前體會到的優缺點大概就這樣，而且感覺我們班大部分的人都是用<span>python 寫，所以我想用少數人用的lua。</span></p><h1>結案報告</h1>
<h2>專案口頭簡報</h2>
<p>各組利用倉儲中的 Reveal.js 進行結案簡報 (結案口頭簡報)</p>
<h2>專案報告書</h2>
<p>各組完成 html 與 pdf 格式之手足球專案結案報告 (文字結案報告書)</p>
<p><a href="https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g2/downloads/report.pdf">PDF</a></p>