var tipuesearch = {"pages": [{'title': '各組期末報告說明', 'text': '各組員必須在 W17 上課之前完成期末報告簡報影片上傳與連結, 並放入本網站之"專案口頭簡報"頁面. \n 各組必須在 W17 上課之前完成分組期末報告 pdf 檔案, 上傳至各分組的倉儲中, 並將連結提供至本網站之"專案報告書"頁面. \n 期末報告期間每週對各成員之評分依據下列要項: \n \n 各組員在各分組網站中所呈現之任務執行內容, 並拍攝操作影音 mp4, 將影片標題署名"國立虎尾科技大學-機械設計工程系-協同產品設計實習 A - 學號及影片主題" 後上傳, 並將影片嵌入本網站各章節頁面中. \n 每組將提供組長本網站倉儲協同管理權, 專門處理各組員在各分支或 master 分支中的 pull requests, 各組員必須透過以 ag1, ag2 .... 命名之分支對本倉儲改版, 確定內容無誤後, 再設法由組長處理各 pull requests 之內容合併, Github Pages 將設為與 master 分支對應, 各組員之評分將依據各 pull requests 中所列出之學號與內容判定. \n 請各組員勿將影片檔、圖片檔案或各式檔案送至本倉儲, 影片檔案請上傳至 Youtube, 圖片檔案請送至各組倉儲網站, 各式檔案則請送至各組員 Google Drive 區, 並以嵌入 (iframe), 將影片放入本網站, 其餘圖片或檔案則透過 img 或 a 標註放入各相關頁面. \n \n 2a 分組倉儲 \n https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1 \xa0( 2ag1 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2 \xa0( 2ag2 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1 \xa0( 2ag3 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4 \xa0( 2ag4 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5 \xa0( 2ag5 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6 \xa0( 2ag6 )', 'tags': '', 'url': '各組期末報告說明.html'}, {'title': '執行規劃', 'text': '', 'tags': '', 'url': '執行規劃.html'}, {'title': '手足球系統模擬', 'text': '專案成果摘要 \n 專案執行動機 \n 相關文獻探討 \n 專案執行成員 \n 執行使用套件 \n 專案執行過程規劃 \n 專案執行內容 \n 專案結論', 'tags': '', 'url': '手足球系統模擬.html'}, {'title': '設計與繪圖', 'text': '', 'tags': '', 'url': '設計與繪圖.html'}, {'title': '零組件尺寸分析', 'text': '手足球系統的零組件尺寸分析 (可行性分析) \n', 'tags': '', 'url': '零組件尺寸分析.html'}, {'title': '參數設計與繪圖', 'text': '手足球系統的零組件參數設計與繪圖 (零組件初步設計繪圖) \n Onshape 零組件連結 \n', 'tags': '', 'url': '參數設計與繪圖.html'}, {'title': '細部設計與 BOM', 'text': '手足球零件格式說明 \n 手足球零件格式說明 \n 零件 BOM \n 手足球零組件材料表 (含零組件下載連結) \n 零件尺寸圖 \n 零件尺寸圖 \n 零件部分組裝圖 \n 零件部分組裝圖 \n 3D 零組件爆炸圖 \n 3D 零組件爆炸圖', 'tags': '', 'url': '細部設計與 BOM.html'}, {'title': 'V-rep 動態模擬', 'text': '', 'tags': '', 'url': 'V-rep 動態模擬.html'}, {'title': '送球機構設計與模擬', 'text': '\n', 'tags': '', 'url': '送球機構設計與模擬.html'}, {'title': '系統功能展示', 'text': '這裡紀載了全部的手足球版本以及詳細歷程 \n 由於部分程式過長所以 點此處 可以到原網站 \n 人機對決 \n 最終版本的\'玩家與電腦\'對打，完整code \n 操作說明:方向鍵的左右下按鍵 、z、x、c、v分別按順序從z的守門員到v的最前排、R鍵用來讓球回位至正中央(怕卡bug) (( 人機對決 程式過長 \n \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion.ttt \n 機² 對決 \n 寫完人機對打後，花了不到1小時寫完電腦對電腦的版本 -(( 機² 對決程式過長 \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion_EX.ttt \n 人形歸位 \n 我將每根桿件設定成"當按了按鍵變成擊球狀態後會到達邊界數值，如果到達邊界直做減速度運動回到初始狀態"，下方code中為+dVel，其原因是因為原先設定擊球為做減速度運動而回球則加入加速度。 \n \n A= sim.getObjectHandle(\'RS1_PO1\')\nPA= sim.getObjectPosition(A,-1)\nif PA[1] >= -0.712 then\n    Roller_v = Roller_v + dVel*3\nend\nB= sim.getObjectHandle(\'RS2_PO1\')\nPB= sim.getObjectPosition(B,-1)\nif PB[1] >= -0.531 then\n    Roller_v2 = Roller_v2 + dVel*3\nend\nC= sim.getObjectHandle(\'RS4_PO2\')\nPC= sim.getObjectPosition(C,-1)\nif PC[1] >= -0.197 then\n    Roller_v3=Roller_v3 + dVel*5\nend\nD= sim.getObjectHandle(\'RS3_PO1\')\nPD= sim.getObjectPosition(D,-1)\nif PD[1] >= 0.137 then\n    Roller_v4=Roller_v4 + dVel*5\nend \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/www2.ttt \n 電腦多人形球位判斷式 \n 將擊球的人行分成三個後，紀錄每兩個人型之間的距離，利用補正讓球穿過人形與人形之間的分界線時，判斷式work，加入補正的數值讓最左或是最右邊的人形能對正球體。 此程式為最初簡易版本。 (判斷式過長 \n \n \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/ww5.ttt \n 回球判斷式-無軌道(包含計分判斷式) \n 一開始還沒有導球軌道時，為了不用一直關掉在啟動，寫了一個簡單的回位code，讓球經過球門時，由於球門有判斷式屬於邊界，一通過就會回到設定好的球。 \n 而計分也是利用相通的方法，且由於此程式會自動形成迴圈所以讓他判斷成每當球經過時+1分後回傳。此程式為最初簡易版本。 \n \n 以下都更改於function sysCall_actuation()中 \n \xa0 \n        if 1 then  --C_goalkeeper\n            if X <= 0.02 then\n                sim.setJointTargetVelocity(LR1,-5)\n            elseif X > 0.02 then\n                sim.setJointTargetVelocity(LR1,5)\n            end\n       end\n----------------\n       if Ball_s[1] < -0.85 or Ball_s[1] >= 0.61 then\n            sim.setObjectPosition(Ball,-1,{-0.1429, -0.1334, 0.5})\n       end\n \n \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/Reborn.ttt \n 偽-回球判斷式-有軌道 \n 也就是送球機構於上一章節的送球機構設計與模擬討論過 \n \n function reborn_ball_count_goal()\n    if Ball_s[1] < -0.85 and Ball_s[3] > 0.12507 then\n        Player_G = Player_G + 1\n--        sim.setObjectPosition(Ball,-1,{-0.13, -0.1334, 0.5})\n    end   \n    if Ball_s[1] >= 0.61 and Ball_s[3] > 0.1251 then\n        Computer_G = Computer_G + 1\n--        sim.setObjectPosition(Ball,-1,{-0.15, -0.1334, 0.5})\n    end\n    if Ball_s[3] > 0.1251 then\n        if Ball_s[1] < -0.85 or Ball_s[1] >= 0.61 then\n            print[[Player : Computer]]\n            print(\'      \'..Computer_G..\'     \'..Player_G)\n        end\n    end\n    if Ball_s[1] > 0.905 and Ball_s[2] < -0.069 and Ball_s[3] < 0.036 then\n        sim.setJointTargetVelocity(Push_1,1)\n    end\n    if Ball_s[1] < -1.15 and Ball_s[2] < -0.123 and Ball_s[3] < 0.036 then\n        sim.setJointTargetVelocity(Push_2,-1)\n    end\n    if Ball_s[3] > 0.036 then\n        sim.setJointTargetVelocity(Push_1,-1)\n        sim.setJointTargetVelocity(Push_2,1)\n    end\n    if Ball_s[1] < -1.156 and Ball_s[2] > 0.163 and Ball_s[3] > 0.058 then\n    sim.setObjectPosition(Ball,-1,{-0.20361, 0.2739, 0.15735})\n    end\n    if Ball_s[1] < -0.20361 and Ball_s[2] > 0.2740 and Ball_s[3] > 0.15735 then\n    sim.setObjectPosition(Ball,-1,{-0.2049, 0.23, 0.1482})\n    end\n    if Ball_s[1] > 0.9056 and Ball_s[2] <  -0.4247 and Ball_s[3] > 0.0592 then\n    sim.setObjectPosition(Ball,-1,{-0.043425,  -0.60401, 0.15735})\n    end\n    if Ball_s[1] > -0.04753 and Ball_s[2] <  -0.5240 and Ball_s[3] > 0.15735 then\n    sim.setObjectPosition(Ball,-1,{-0.03667,  -0.48443, 0.1482})\n    end\nend \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/C_Goal_4.3.ttt \n 問題與討論 \n Q1.怎麼沒有雙打? \n A1.按鍵過多不好操控，最後會變成賽外賽? \n Q2.彈性係數怎麼調整? \n A2. 彈性系數於球的材質中調整，而材質的調整在關係設定的下方，表中的Restitution就是了最大彈性為1最小為0，越大越彈。 \n \n T3: 反作用設定:包含場地、球、桿件、人形 ((解釋起來很麻煩但大概是這樣 \n 第一個為場地 : 第一行設定讓除了球、人形的桿件能反應但設定第八行讓球、人形可反應但桿件無法，其餘不勾選 \n \n 第二個為球 : 第一行不勾選讓桿件與人行無法反應，但勾選其他行(第八)讓人形能反應 \n \n 第三個為桿件 : 只與場地反應((這裡注意，桿件本身與人型成父子屬性 \n \n 最後是人形 : 勾選第八行讓球反應可踢球且因與場地反應所以不出場地 \n \n 理解這個需要一點邏輯...如果不懂就照勾選吧... \n T4. 運行時建議 先點一下烏龜 太快會增加電腦能力也有機率bug \n \n Q5.怎麼不用python寫?? \n A5.我會選擇使用Vrep內嵌的Lua編寫的原因 \n 優點: \n python : 可執行運算值較大的編譯、可加外部其他的程式合用 \n lua : Vrep內部沿用 , 延遲現象較少、編譯很方便 \n 缺點: \n python : 會有爆ping問題導致延遲、產生很多衝突可能性高 \n lua : 太多運算時直接停止、內部函式限制多 \n 目前體會到的優缺點大概就這樣，而且感覺我們班大部分的人都是用 python\xa0寫，所以我想用少數人用的lua。', 'tags': '', 'url': '系統功能展示.html'}, {'title': '結案報告', 'text': '', 'tags': '', 'url': '結案報告.html'}, {'title': '專案口頭簡報', 'text': '各組利用倉儲中的 Reveal.js 進行結案簡報 (結案口頭簡報) \n', 'tags': '', 'url': '專案口頭簡報.html'}, {'title': '專案報告書', 'text': '各組完成 html 與 pdf 格式之手足球專案結案報告 (文字結案報告書) \n PDF', 'tags': '', 'url': '專案報告書.html'}]};